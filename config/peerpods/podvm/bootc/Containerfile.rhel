# pause command builder
FROM registry.redhat.io/rhel8/go-toolset:1.22.7-5.1733303300 as pod_builder
ADD --chmod=644 https://raw.githubusercontent.com/openshift/images/5cc2177e050fb1c13bf594c91f0ca3f06e32843d/pod/pod.go .
RUN CGO_ENABLED=0 GO111MODULE=off go build -installsuffix=cgo -o ./pod ./pod.go

# build pause # TODO: remove once agent support dynamic pause command or switching to OCP's official pause
FROM registry.redhat.io/ubi9/ubi-minimal:9.5 as pause
RUN curl -L https://github.com/opencontainers/umoci/releases/download/v0.4.7/umoci.amd64 -o /usr/bin/umoci && chmod +x /usr/bin/umoci
RUN umoci init --layout pause && umoci new --image pause:osc
RUN umoci config --image pause:osc --config.entrypoint=/usr/bin/pod --author="OSC"
RUN umoci unpack --rootless --image pause:osc /pause
COPY --from=pod_builder /opt/app-root/src/pod /pause/rootfs/usr/bin/

# Get payload
FROM registry.redhat.io/openshift-sandboxed-containers/osc-podvm-payload-rhel9:1.8.0-6 as payload

# Build bootc rhel podvm
FROM registry.redhat.io/rhel9/rhel-bootc:9.4 as podvm-bootc
COPY etc /etc
COPY usr /usr

# afterburn is required for Azure # TODO: move to an offical option
RUN dnf config-manager --add-repo=https://mirror.stream.centos.org/9-stream/AppStream/x86_64/os/ && dnf install -y --nogpgcheck afterburn && dnf clean all
RUN  dnf config-manager --set-disabled "*centos*"
RUN ln -s ../afterburn-checkin.service /etc/systemd/system/multi-user.target.wants/afterburn-checkin.service

# Copy pause bundle
COPY --from=pause /pause /pause_bundle

# Extract podvm binaries
COPY --from=payload /podvm-binaries.tar.gz /podvm-binaries.tar.gz
RUN tar -xzvf podvm-binaries.tar.gz -C /
RUN sed -i 's#What=/kata-containers#What=/var/kata-containers#g' /etc/systemd/system/run-kata\\x2dcontainers.mount



########## Nvidia podVM target ##########
FROM podvm-bootc as nvidia-podvm-bootc

# make sure driver matches the base rhel-bootc kernel's
# https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/precompiled/
ENV DRIVER_VERSION="535.216.01"

ARG ORG_ID
ARG ACTIVATION_KEY

RUN if [[ -n "${ACTIVATION_KEY}" && -n "${ORG_ID}" ]]; then \
    #rm -f /etc/rhsm-host && rm -f /etc/pki/entitlement-host; \
    subscription-manager register --org=${ORG_ID} --activationkey=${ACTIVATION_KEY}; \
    fi

RUN export OS_VERSION_MAJOR=$(grep "^VERSION=" /etc/os-release | cut -d '=' -f 2 | sed 's/"//g' | cut -d '.' -f 1) && \
    export KERNEL_VERSION=$(rpm -q --qf "%{VERSION}" kernel-core) && \
    export KERNEL_RELEASE=$(rpm -q --qf "%{RELEASE}" kernel-core | sed 's/\.el.\(_.\)*$//') && \
    export DRIVER_STREAM=$(echo ${DRIVER_VERSION} | cut -d '.' -f 1) && \
    dnf config-manager --add-repo=https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/cuda-rhel9.repo && \
    dnf config-manager --best --nodocs --setopt=install_weak_deps=False --save && \
    dnf -y module enable nvidia-driver:${DRIVER_STREAM}/default && \
    dnf install -y kmod-nvidia-${DRIVER_VERSION}-${KERNEL_VERSION}-${KERNEL_RELEASE} \
        nvidia-driver-${DRIVER_VERSION} \
        nvidia-driver-cuda-${DRIVER_VERSION} \
        nvidia-driver-libs-${DRIVER_VERSION} \
        nvidia-persistenced-${DRIVER_VERSION} \
        nvidia-driver-NVML-${DRIVER_VERSION} \
        nvidia-container-toolkit && \
    dnf clean all

RUN echo "blacklist nouveau" > /etc/modprobe.d/blacklist_nouveau.conf
RUN sed -i 's/^#no-cgroups = false/no-cgroups = true/' /etc/nvidia-container-runtime/config.toml
RUN subscription-manager unregister

ADD nvidia/nvidia-cdi.service /etc/systemd/system/nvidia-cdi.service
ADD nvidia/generate-nvidia-cdi.sh /usr/local/bin/generate-nvidia-cdi.sh
RUN ln -s /etc/systemd/system/nvidia-cdi.service /etc/systemd/system/multi-user.target.wants/nvidia-cdi.service
#########################################


# a workaround to set podvm-bootc as default target
FROM podvm-bootc as default-target
