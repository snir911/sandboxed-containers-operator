name: Build Bootc PodVM Image

on:
  push:
    branches: [ devel ]
    paths:
      - 'config/peerpods/podvm/bootc/**'
  pull_request:
    branches: [ devel ]
    paths:
      - 'config/peerpods/podvm/bootc/**'
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: 'Cloud provider (azure, aws, libvirt)'
        required: true
        default: 'azure'
        type: choice
        options:
          - azure
          - aws
          - libvirt
      build_disk:
        description: 'Build disk image from container'
        required: false
        default: true
        type: boolean
      target_variant:
        description: 'Container target to build'
        required: false
        default: 'nvidia'
        type: choice
        options:
          - nvidia
          - standard

env:
  CLOUD_PROVIDER: ${{ github.event.inputs.cloud_provider || 'azure' }}

jobs:
  build-container:
    runs-on: ubuntu-latest
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout repository  
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine build target
        id: target
        run: |
          # Default to nvidia, use standard only when explicitly requested
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.target_variant }}" == "standard" ]]; then
            echo "BUILD_TARGET=default-target" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=podvm-bootc:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "TAR_FILE=podvm-bootc.tar" >> $GITHUB_OUTPUT
            echo "ARTIFACT_NAME=podvm-bootc-container-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "VARIANT=standard" >> $GITHUB_OUTPUT
          else
            echo "BUILD_TARGET=nvidia-podvm-bootc" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=podvm-bootc-nvidia:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "TAR_FILE=podvm-bootc-nvidia.tar" >> $GITHUB_OUTPUT
            echo "ARTIFACT_NAME=podvm-bootc-nvidia-container-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "VARIANT=nvidia" >> $GITHUB_OUTPUT
          fi

      - name: Build container image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: config/peerpods/podvm/bootc
          file: config/peerpods/podvm/bootc/Containerfile.fedora
          target: ${{ steps.target.outputs.BUILD_TARGET }}
          build-args: |
            CLOUD_PROVIDER=${{ env.CLOUD_PROVIDER }}
          tags: ${{ steps.target.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          load: true

      - name: Create output directory
        run: |
          mkdir -p output/qcow2

      - name: build-disk-image
        run: |
          echo "Building disk image..."
          docker run \
            --rm \
            --privileged \
            --security-opt label=type:unconfined_t \
            -v $(pwd)/config/peerpods/podvm/bootc/config.toml:/config.toml:ro \
            -v $(pwd)/output:/output \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            quay.io/centos-bootc/bootc-image-builder:latest \
            --type qcow2 \
            --rootfs xfs \
            --local \
            ${{ steps.target.outputs.IMAGE_TAG }}

      - name: Verify disk image
        run: ls -lh output/qcow2/disk.qcow2

      - name: Wrap disk in oci image
        uses: docker/build-push-action@v6
        with:
          context: config/peerpods/podvm
          file: config/peerpods/podvm/Dockerfile.podvm-oci
          tags: ${{ steps.target.outputs.IMAGE_TAG }}-oci
          build-args: PODVM_IMAGE_SRC=bootc/output/qcow2/disk.qcow2
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          load: true