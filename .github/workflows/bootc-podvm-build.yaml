name: Build Bootc PodVM Image

on:
  push:
    branches: [ devel ]
    paths:
      - 'config/peerpods/podvm/bootc/**'
  pull_request:
    branches: [ devel ]
    paths:
      - 'config/peerpods/podvm/bootc/**'
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: 'Cloud provider (azure, aws, libvirt)'
        required: true
        default: 'azure'
        type: choice
        options:
          - azure
          - aws
          - libvirt
      build_disk:
        description: 'Build disk image from container'
        required: false
        default: true
        type: boolean
      target_variant:
        description: 'Container target to build'
        required: false
        default: 'nvidia'
        type: choice
        options:
          - nvidia
          - standard

env:
  CLOUD_PROVIDER: ${{ github.event.inputs.cloud_provider || 'azure' }}

jobs:
  build-container:
    runs-on: ubuntu-latest
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout repository  
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine build target
        id: target
        run: |
          # Default to nvidia, use standard only when explicitly requested
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.target_variant }}" == "standard" ]]; then
            echo "BUILD_TARGET=default-target" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=podvm-bootc:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "TAR_FILE=podvm-bootc.tar" >> $GITHUB_OUTPUT
            echo "ARTIFACT_NAME=podvm-bootc-container-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "VARIANT=standard" >> $GITHUB_OUTPUT
          else
            echo "BUILD_TARGET=nvidia-podvm-bootc" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=podvm-bootc-nvidia:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "TAR_FILE=podvm-bootc-nvidia.tar" >> $GITHUB_OUTPUT
            echo "ARTIFACT_NAME=podvm-bootc-nvidia-container-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "VARIANT=nvidia" >> $GITHUB_OUTPUT
          fi

      - name: Build container image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: config/peerpods/podvm/bootc
          file: config/peerpods/podvm/bootc/Containerfile.fedora
          target: ${{ steps.target.outputs.BUILD_TARGET }}
          build-args: |
            CLOUD_PROVIDER=${{ env.CLOUD_PROVIDER }}
          tags: ${{ steps.target.outputs.IMAGE_TAG }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          outputs: type=docker,dest=/tmp/${{ steps.target.outputs.TAR_FILE }}

      - name: Upload container image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.target.outputs.ARTIFACT_NAME }}
          path: /tmp/${{ steps.target.outputs.TAR_FILE }}
          retention-days: 7

  build-disk-image:
    runs-on: ubuntu-latest
    needs: build-container
    if: github.event.inputs.build_disk != 'false'
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine target variant
        id: variant
        run: |
          # Determine which variant was built
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.target_variant }}" == "standard" ]]; then
            echo "VARIANT=standard" >> $GITHUB_OUTPUT
            echo "ARTIFACT_NAME=podvm-bootc-container-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "CONTAINER_FILE=podvm-bootc.tar" >> $GITHUB_OUTPUT
          else
            echo "VARIANT=nvidia" >> $GITHUB_OUTPUT
            echo "ARTIFACT_NAME=podvm-bootc-nvidia-container-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "CONTAINER_FILE=podvm-bootc-nvidia.tar" >> $GITHUB_OUTPUT
          fi

      - name: Download container image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.variant.outputs.ARTIFACT_NAME }}
          path: /tmp

      - name: Load container image
        run: |
          # Load the container image from the artifact
          echo "Loading container from: /tmp/${{ steps.variant.outputs.CONTAINER_FILE }}"
          docker load -i /tmp/${{ steps.variant.outputs.CONTAINER_FILE }}
          
          # Get the loaded image name and tag
          IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | head -n1)
          echo "Loaded image: $IMAGE_NAME (variant: ${{ steps.variant.outputs.VARIANT }})"
          echo "LOADED_IMAGE=$IMAGE_NAME" >> $GITHUB_ENV
          
          # Transfer image from Docker to Podman storage for bootc-image-builder
          echo "Transferring image to Podman storage..."
          docker save "$IMAGE_NAME" | sudo podman load
          
          # Verify image is available in Podman
          sudo podman images | grep -E "(REPOSITORY|$(echo $IMAGE_NAME | cut -d: -f1))"

      - name: Create output directory
        run: |
          mkdir -p output

      - name: Convert container to disk image
        run: |
          echo "Converting container image: $LOADED_IMAGE"
          
          # Convert bootc container to qcow2 disk image using the loaded image
          sudo podman run \
            --rm \
            --privileged \
            --security-opt label=type:unconfined_t \
            -v $(pwd)/config/peerpods/podvm/bootc/config.toml:/config.toml:ro \
            -v $(pwd)/output:/output \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            quay.io/centos-bootc/bootc-image-builder:latest \
            --type qcow2 \
            --rootfs xfs \
            --local \
            "$LOADED_IMAGE"

      - name: Compress disk image
        run: |
          cd output/qcow2
          if [ -f disk.qcow2 ]; then
            echo "Compressing disk image..."
            xz -9 -T 0 disk.qcow2
            ls -lah disk.qcow2.xz
          else
            echo "Error: disk.qcow2 not found"
            ls -la
            exit 1
          fi

      - name: Upload disk image artifact
        uses: actions/upload-artifact@v4
        with:
          name: podvm-disk-${{ steps.variant.outputs.VARIANT }}-${{ env.CLOUD_PROVIDER }}-${{ github.sha }}
          path: output/qcow2/disk.qcow2.xz
          retention-days: 30

      - name: Generate disk image metadata
        run: |
          cd output/qcow2
          if [ -f disk.qcow2.xz ]; then
            echo "DISK_SIZE=$(stat -c%s disk.qcow2.xz)" >> $GITHUB_ENV
            echo "DISK_SHA256=$(sha256sum disk.qcow2.xz | cut -d' ' -f1)" >> $GITHUB_ENV
          fi

      - name: Create release info
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel'
        run: |
          cat > disk-info.json << EOF
          {
            "cloud_provider": "${{ env.CLOUD_PROVIDER }}",
            "container_variant": "${{ steps.variant.outputs.VARIANT }}",
            "container_image": "${{ env.LOADED_IMAGE }}",
            "disk_size_bytes": "${{ env.DISK_SIZE }}",
            "disk_sha256": "${{ env.DISK_SHA256 }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "git_commit": "${{ github.sha }}",
            "git_ref": "${{ github.ref }}"
          }
          EOF

      - name: Upload disk metadata
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel'
        uses: actions/upload-artifact@v4
        with:
          name: podvm-disk-metadata-${{ steps.variant.outputs.VARIANT }}-${{ env.CLOUD_PROVIDER }}-${{ github.sha }}
          path: disk-info.json
          retention-days: 90 